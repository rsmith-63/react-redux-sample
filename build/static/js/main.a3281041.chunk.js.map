{"version":3,"sources":["index.js"],"names":["initalState","sendingRequest","requestRecieved","user","name","email","gender","status","statusClass","store","createStore","state","arguments","length","undefined","action","type","Object","_Users_robsmith_react_redux_sample_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","concat","payload","first","last","message","applyMiddleware","logger","thunk","nameEl","document","getElementById","emailEl","genderEl","statusEl","render","getState","innerHTML","className","subscribe","addEventListener","dispatch","axios","get","then","response","data","results","catch","error"],"mappings":"gMAKMA,EAAc,CAClBC,gBAAgB,EAChBC,iBAAiB,EACjBC,KAAM,CACJC,KAAM,GACNC,MAAO,GACPC,OAAQ,IAEVC,OAAQ,GACRC,YAAa,IA6Bf,IAAMC,EAAQC,YAzBd,WAAgD,IAA3BC,EAA2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArBZ,EAAae,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxCX,EAAO,CACXC,KAAM,GACNC,MAAO,GACPC,OAAQ,IAGV,OAAQS,EAAOC,MACb,IAAK,WACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkBV,gBAAgB,EAAMM,OAAQ,aAAcC,YAAa,YAE7E,IAAK,gBAIH,OAHAL,EAAKC,KAAL,GAAAe,OAAeJ,EAAOK,QAAQ,GAAGhB,KAAKiB,MAAtC,KAAAF,OAA+CJ,EAAOK,QAAQ,GAAGhB,KAAKkB,MACtEnB,EAAKE,MAAQU,EAAOK,QAAQ,GAAGf,MAC/BF,EAAKG,OAASS,EAAOK,QAAQ,GAAGd,OACzBW,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkBV,gBAAgB,EAAOE,OAAMI,OAAQ,gBAAiBC,YAAa,YAEvF,IAAK,QACL,OAAOS,OAAAC,EAAA,EAAAD,CAAA,GAAIN,EAAX,CAAkBV,gBAAgB,EAAOM,OAAM,GAAAY,OAAKJ,EAAOK,QAAQG,SAAWf,YAAa,UAC3F,QACE,OAAOG,IAK0Ba,YAAgBC,MAAUC,MAC3DC,EAASC,SAASC,eAAe,QACjCC,EAAUF,SAASC,eAAe,SAClCE,EAAWH,SAASC,eAAe,UACnCG,EAAWJ,SAASC,eAAe,UAEzC,SAASI,IACP,IAAMtB,EAAQF,EAAMyB,WACpBP,EAAOQ,UAAYxB,EAAMR,KAAKC,KAC9B0B,EAAQK,UAAYxB,EAAMR,KAAKE,MAC/B0B,EAASI,UAAYxB,EAAMR,KAAKG,OAChC0B,EAASG,UAAYxB,EAAMJ,OAC3ByB,EAASI,UAAYzB,EAAMH,YAG7ByB,IACAxB,EAAM4B,UAAUJ,GAGhBL,SAASC,eAAe,WACrBS,iBAAiB,QAAS,WACzB7B,EAAM8B,SAAS,SAAAA,GAGbA,EAAS,CAACvB,KAAM,aAEhBwB,IAAMC,IAAI,yCAGPC,KAAK,SAAAC,GACJJ,EAAS,CAACvB,KAAM,gBAAiBI,QAASuB,EAASC,KAAKC,YAG3DC,MAAM,SAAAC,GACLR,EAAS,CAAEvB,KAAM,QAASI,QAAS2B,MAErCR,EAAS,CAACvB,KAAM","file":"static/js/main.a3281041.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport axios from 'axios';\n\nconst initalState = {\n  sendingRequest: false,\n  requestRecieved: false,\n  user: {\n    name: '',\n    email: '',\n    gender: ''\n  },\n  status: '',\n  statusClass: ''\n}\n\n// REDCUER\nfunction userReducer(state=initalState, action) {\n  const user = {\n    name: '',\n    email: '',\n    gender: ''\n  };\n\n  switch (action.type) {\n    case 'GET_USER':\n      return {...state, sendingRequest: true, status: 'Pending...', statusClass: 'pending'}\n      break;\n    case 'USER_RECIEVED':\n      user.name = `${action.payload[0].name.first} ${action.payload[0].name.last}`\n      user.email = action.payload[0].email;\n      user.gender = action.payload[0].gender;\n      return {...state, sendingRequest: false, user, status: 'User Recieved', statusClass: 'success'}\n    break;\n    case 'ERROR':\n    return {...state, sendingRequest: false, status: `${action.payload.message}`, statusClass: 'error'}\n    default:\n      return state\n  }\n}\n\n// STORE\nconst store = createStore(userReducer, applyMiddleware(logger(), thunk));\nconst nameEl = document.getElementById('name');\nconst emailEl = document.getElementById('email');\nconst genderEl = document.getElementById('gender');\nconst statusEl = document.getElementById('status');\n\nfunction render() {\n  const state = store.getState()\n  nameEl.innerHTML = state.user.name;\n  emailEl.innerHTML = state.user.email;\n  genderEl.innerHTML = state.user.gender;\n  statusEl.innerHTML = state.status;\n  statusEl.className = state.statusClass;\n}\n\nrender()\nstore.subscribe(render)\n\n// ACTIONS\ndocument.getElementById('getUser')\n  .addEventListener('click', function () {\n    store.dispatch(dispatch => {\n      // ASYNC ACTION\n      // dispatch action\n      dispatch({type: 'GET_USER'});\n      // do the xhr request\n      axios.get('https://randomuser.me/api/dhfgnfgnfgn')\n      // handle response\n      // success\n        .then(response => {\n          dispatch({type: 'USER_RECIEVED', payload: response.data.results})\n        })\n      // error\n      .catch(error => {\n        dispatch({ type: 'ERROR', payload: error})\n      })\n      dispatch({type: 'AFTER ASYNC ACTION'});\n    });\n\n  })\n"],"sourceRoot":""}